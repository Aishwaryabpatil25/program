1)java:java is based on object oriented programming langauage.
      * it was developed by games gossling in 1995.
      *before it is called oak renamed has java
      *sunmicro system it is owned by oracle.
      *object oriented programming means it is based on object .

 javac - It is used to complie the program javac filename.java


2)JDK-java Development kit:
      *inside jdk we have tools+jre.
      *java program is used to develop the program it includes tools and jre.
  JRE-java run time environment:
      *it includes builtin funcations +jvm.
      *java program is used to excute the using run time .
  JVM-java virtual machine
     *it has .class files 
     *after compiling it stores .class files we can take that files and run on any system like windows,mac,lunix etc.
     *jvm serach for main method and program starts from there.
     *jvm starts when we complie javac and enter java to run that time jvm startes.

3).java                                                and            .class
    *.java it is used for compiling                               *after compiling .class file is generated
    *in .java written code is present                             *in .class file it as machine understandable code is present

4)IDE-intergrated development kit
  there are:
   1)intellij
   2)eclips
   3)notepad++
   4)vs code etc.

5)variable:variable is a container used to store the values.
  
  Syntax: datatype refname = value;

  ex:    int rollNo = 423;

   Types of variable

1)static--it is a keyword we can decalre inside class anywhere it is also class variable we call.
2)local-- it is decalre inside method block
3)instance--it is non static variable and also we can decalre inside class methods anywhere etc.
4)paramtere--inside the method braces we can decalre the parameters.



6)OOps -object oriented programming langauage:
  -->object oriented programming langauage is java based on objects without class and object we cannot do anything it is important.
     *oops it includes 4 principles without object we cannot do program it also includes abstract,polyphramism,encapsulation,inheritance.
     *everything in java is consider has object 

7)it will get error 

8)Data Type
-->data type it is type of data we can store as value.
data type includes types 

1)primitive ->it includes char,byte,short,int,float,long,double,boolean this are fixed and builtin types static
2)non primitive -->it includes array,string,class etc this are non static everything we decalre in class is non primitive data type .

ex:primitive -->int age = 20;
ex:non primitive--->int arr[] num={1,2,3,4,5};

9)Dot operator :
        *It is used to connect.
        *the dot operator is used to access methods in class.
10)java Features

   1)simple
   2)secure
   3)interpreted or complier
   4)robust
   5)object oriented 
   6)dynamic binding
   7)platform independent
   8)architectural netural
   9)multithreading
  
11)Array
    ----->Array is the homogeneous collection of values.
         *array is fixed in size.
         *it ends with n-1.
         *index starts with 0.

Syntax: type arr[] ref = {values};

  Ex:    int arr[] color={"red","pink","black"};

12)Class: class is blueprint of object .
          *every class as object that every object we can call datatype.
          *without class we can not creat objects.
    ex: public class Box
  
  object:
          *object is class and it includes states and behavious it also called fields,properties and behaviours means methods.
          *object is datatype
          *object is instances of class.
          *object does not have any parent class but class  has Class.
          *using object we can access methods.
          *object is non static values.
     EX:public class pen{
           
               public string types;
                {
                  public void display()
                   {
                     system.out.println(this is pen method");
                    }
             }

13)keywords--keywords is nothing but a whatevre we use in program.
          They are:
        1)public  
        2)static
        3)private
        4)protected
        5)enum
        6)try
        7)catch
        8)final
        9)finally
        10)if
        11)else
        12)break
        13)case
        14)switch
        15)continue ,int,short,byte,float,long,double,char, synchronized etc....

Example:
      public class Student{                                     public class StudentRunner{
                                                                     public static void main(String args[]){
          
          public int rollNo;                                             Student s = new Student();
 
          public string name;                                             s.display();
          public double pNo;                                                }
                                                                        }
     public void display(int rollNo,string name, double pNo)
         {
          Sytsem.out.println(rollNo:+rollNo);
          Sytsem.out.println("name:"+name);
          Sytsem.out.println("name:"+name);
         }
     
       }

14)Constructor:
      --->constructor is special method and it is a block of code exceutes whenever it is object is created.
         *it is special because it  is instantiate using new keyword .
         *constructor chaining :calling on constructor inside another constructor is called chaining
         *chaining line should start from first line and any one of line not have chaining .
         *super and this keywords are used.code can be reuse it is main usecase for constructor chinaing.

Types of constructor

1)no param--->no param parameter not have any values in it.
2)default--->by default complier gives output.
3)parameterized--->it contains parameters inside the braces it has values in it.

Example:
        public class Watch{                         public class Wtach{
            public string color;                      public string color;
            public Watch()                             public string brand;
             {                                          {
              System.out.println("no param const");          public Watch(string color,string brand)
             }                                                {
          }                                                     this.color=color;
                                                                this.brand=brand;
                                                               }
                                                             public watch(string color,string brand)
                                                               {
                                                                 System.out.println("color:"+color);
                                                                 System.out.println("brand:"+brand);
                                                                }
                                                                }
15)     *main method is static because jvm seraches for main method 
        *if main method is static it starts exceution jvm it contain 
        *.class files we can not create objects in that .
        *it seraches class and it starts execution
  
  method Types

1)changing the type
2)order
3)number

EXample:

16)public class Book{                                 
    public static void main(String args[])  or        int arr[] num={12,3,2,45,6,7,6};
                                                      arr.len(5);          
      {
        int arr[] num={12,3,2,45,6,7,6};
        for(int i=0;i<num.length;i++)
         {
           System.out.println(num[i]);
         }
    }
17)method--->
         * It is block of code exceute whenever it is called.
         *method name should start with lowercase next word uppercase.
         *there is no excplicit return type.
   method overrloding---->
         *method overrloding means having same method name with diffrent paramters in it
         *it has same method name but we can change parameters and exceute.

   method overriding---->
         *method overriding having same method name but funcationality is change called method overriding.

Example:public class School{                              public class HighSchool extends School{
         public string name;                                public string address;
             
           public void display()                             public void display()
             {                                                 {
               System.out.println("this is school");            @override
             }                                                   System.out.println("this is highschool");
       }                                                         }
                                                               }
Example:

      public class cup{
       public static void main(String args[]){
        display(2,4);
        display(4,2);
        display(2,2);
      }
  public void display(byte num1,int num2)   public void display(int num1,long num2)      public void display(int num2,int num1)
     {                                       {                                            {
        number=val(num1,num2);                   number=val(num2,num1);                      int val; 
                                                                                             val=sum(num1+num2);
        int size=(val);                          int size=(val);                              return sum;
        return size;                             return size;                              }

     }                                           }
}                                             }
        

        
       









   
          

  